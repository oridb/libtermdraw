use std
use sys

use "types"
use "term"
use "termios"

pkg termdraw =
	const event	: (t : term# -> event)
	const checksize	: (t : term# -> void)
;;

const Esc = 27
var winchanges = 0
var winreported = 0

const __init__ = {
	var osa
	var sa = [
		.handler = (winch : byte#),
		.flags = sys.Sarestart,
	]
	sys.sigaction(sys.Sigwinch, &sa, &osa)
}

const winch = {;
	winchanges++
}

const event = {t
	var c

	while true
		/*
		we can get more signals here, so lets try
		to do something atomic-like.
		*/
		c = winchanges
		if c > winreported
			winreported = c
			checksize(t)
			-> `Winsz (t.x, t.y)
		;;

		match readkey(t)
		| `std.Some e:	-> e
		| `std.None:	continue
		;;
	;;
	-> `Gone
}

const checksize = {t
	var wc, x, y

	tcwinsize(t.fd, &wc)
	x = (wc.col : int)
	y = (wc.row : int)
	resize(t, x, y)
}

const readkey = {t
	var buf : byte[4]
	var n, b
	
	b = readb(t.fd)
	if b == 0
		-> `std.None
	elif b >= 0x80
		match std.read(t.fd, buf[1:])
		| `std.Ok len:
			buf[0] = b
			-> `std.Some `Kc std.decode(buf[:len+1])
		| `std.Err e:
			std.close(t.fd)
			-> `std.Some `Gone
		;;
	else
		n = t.kesc
		while true
			if b == 0
				-> `std.Some n.ev
			;;
			match n.sub[b]
			| `std.Some nn:	n = nn
			| `std.None:	-> `std.Some n.ev
			;;
			b = readb(t.fd)
		;;
	;;
	-> `std.None
}

const readb = {fd
	var buf : byte[1]
	match std.read(fd, buf[:])
	| `std.Ok 0:	-> 0
	| `std.Ok n:	-> buf[0]
	| `std.Err e:
		std.put("error reading input: {}\n", e)
		std.fatal("exiting..\n", e)
	;;

}

