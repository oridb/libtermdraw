use std
use testr
use termdraw

const main = {
	testr.run([
		/* basic */
		[.name="cpstr", .fn={ctx
			checkfmt(ctx, "abc", [][:], "abc")
		}],
		[.name="multiarg", .fn={ctx
			var params = [`termdraw.Int 123, `termdraw.Str "abc"][:]
			checkfmt(ctx, "%p1%d%p2%s", params, "123abc")
		}],
		[.name="escape-pct", .fn={ctx
			checkfmt(ctx, "%%abc", [][:], "%abc")
		}],
		[.name="increment", .fn={ctx
			var params = [`termdraw.Int 123, `termdraw.Int 243, `termdraw.Str "abc"][:]
			checkfmt(ctx, "%i%p1%d-%p2%d-%p3%s", params, "124-244-abc")
		}],

		/* literals */
		[.name="litint-1",	.fn={ctx
			checkfmt(ctx, "%{5}%d", [`termdraw.Int 9][:], "5")
		}],
		[.name="litint-2",	.fn={ctx
			checkfmt(ctx, "%{5}%{6}%d", [`termdraw.Int 9][:], "6")
		}],

		/* numeric */
		[.name="arith-add",	.fn={ctx; binop(ctx, 'd', '+', 10, 21, "31")}],
		[.name="arith-sub",	.fn={ctx; binop(ctx, 'd', '-', 10, 21, "-11")}],
		[.name="arith-mul",	.fn={ctx; binop(ctx, 'd', '*', 10, 21, "210")}],
		[.name="arith-div",	.fn={ctx; binop(ctx, 'd', '/', 100, 9, "11")}],
		[.name="arith-mod",	.fn={ctx; binop(ctx, 'd', 'm', 100, 9, "1")}],

		/* comparison */
		[.name="comp-lt-1",	.fn={ctx; binop(ctx, 'd', '<', 0, 1, "1")}],
		[.name="comp-lt-2",	.fn={ctx; binop(ctx, 'd', '<', 0, 999, "1")}],
		[.name="comp-lt-3",	.fn={ctx; binop(ctx, 'd', '<', 2, -2, "0")}],
		[.name="comp-gt-1",	.fn={ctx; binop(ctx, 'd', '>', 156, 100, "1")}],

		/* bitwise */
		[.name="bit-and",	.fn={ctx; binop(ctx, 'x','&', 0x60, 0xc0, "40")}],
		[.name="bit-or",	.fn={ctx; binop(ctx, 'x','|', 0x60, 0x80, "e0")}],
		[.name="bit-xor",	.fn={ctx; binop(ctx, 'x','^', 0x60, 0xc0, "a0")}],
		/* not really a binop, but I can cheat. */
		[.name="bit-not",	.fn={ctx; binop(ctx, 'x','~', 0x00, 0xc0, "ffffff3f")}],

		/* logical */
		[.name="logic-and-tt",	.fn={ctx; binop(ctx, 'x','A', 10, 20, "1")}],
		[.name="logic-and-tf",	.fn={ctx; binop(ctx, 'x','A', 10, 0, "0")}],
		[.name="logic-and-ft",	.fn={ctx; binop(ctx, 'x','A', 0, 10, "0")}],
		[.name="logic-and-ff",	.fn={ctx; binop(ctx, 'x','A', 0, 0, "0")}],

		[.name="logic-or-tt",	.fn={ctx; binop(ctx, 'x','O', 10, 20, "1")}],
		[.name="logic-or-tf",	.fn={ctx; binop(ctx, 'x','O', 10, 0, "1")}],
		[.name="logic-or-ft",	.fn={ctx; binop(ctx, 'x','O', 0, 10, "1")}],
		[.name="logic-or-ff",	.fn={ctx; binop(ctx, 'x','O', 0, 0, "0")}],

		[.name="logic-not-t",	.fn={ctx; binop(ctx, 'x','!', 10, 20, "0")}],
		[.name="logic-not-f",	.fn={ctx; binop(ctx, 'x','!', 10, 0, "1")}],

		/* conditional */
		[.name="cond-basic-t", .fn={ctx
			var params = [`termdraw.Int 1][:]
			checkfmt(ctx, "%?%p1%ttrue%efalse%;", params, "true")
		}],
		[.name="cond-basic-f", .fn={ctx
			var params = [`termdraw.Int 0][:]
			checkfmt(ctx, "%?%p1%ttrue%efalse%;", params, "false")
		}],
		[.name="cond-nested-tt", .fn={ctx
			var params = [`termdraw.Int 1, `termdraw.Int 1][:]
			checkfmt(ctx, \
				"%?%p1%t%?%p2%ttruetrue%efalse%;%efalse%;", \
				params, "truetrue")
		}],
		[.name="cond-nested-tf", .fn={ctx
			var params = [`termdraw.Int 1, `termdraw.Int 0][:]
			checkfmt(ctx, \
				"%?%p1%t%?%p2%ttruetrue%etruefalse%;%efalsefalse%;", \
				params, "truefalse") 
		}],
		/* oddballs */
	][:])
}

const binop = {ctx, fmt, op, a0, a1, expected
	var f, r, s, sb

	s = std.fmt("%p1%p2%{}%{}", op, fmt)
	var params = [`termdraw.Int a0, `termdraw.Int a1][:]
	sb = std.mksb()
	termdraw.tifmt(&f, sb, s, params) 
	r = std.sbfin(sb)
	testr.check(ctx, std.sleq(r, expected), "expected {}, got {}", expected, r)
	std.slfree(s)
	std.slfree(r)
}

const checkfmt = {ctx, fmt, params, expected
	var f, sb, s

	sb = std.mksb()
	termdraw.tifmt(&f, sb, fmt, params) 
	s = std.sbfin(sb)
	testr.check(ctx, std.sleq(s, expected), "expected {}, got {}\n", expected, s)
	std.slfree(s)
}
