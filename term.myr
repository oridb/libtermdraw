use std

use "types"
use "termios"
use "tiparse"
use "tiprops"
use "tifmt"

pkg termdraw =
	const Black	: color = `Palette8 0
	const Red  	: color = `Palette8 1
	const Green	: color = `Palette8 2
	const Yellow	: color = `Palette8 3
	const Blue 	: color = `Palette8 4
	const Magenta	: color = `Palette8 5
	const Cyan 	: color = `Palette8 6
	const White	: color = `Palette8 7
	const Default	: color = `Palette8 9

	const Normal	: attr = 0
	const Bold	: attr = 1
	const Italic	: attr = 3
	const Underline	: attr = 4
	const Blink	: attr = 5
	const Invert	: attr = 7

	const mk	: (fd : std.fd -> term#)
	const free	: (t : term# -> void)
	const raw	: (t : term# -> void)

	const size	: (t : term# -> (int, int))
	const move	: (t : term#, r : int, c : int -> void)
	const cursorpos	: (t : term#, r : int, c : int -> void)
	const cursoroff	: (t : term# -> void)
	const cursoron	: (t : term# -> void)

	const strwidth	: (t : term#, str : byte[:] -> int)

	const cls	: (t : term# -> void)
	const clear	: (t : term#, x0 : int, y0 : int, x1 : int, y1 : int -> void)
	const flush	: (t : term# -> void)
	const putc	: (t : term#, c : char -> void)
	const put	: (t : term#, fmt : byte[:], args : ... -> void)
	const setfg	: (t : term#, c : color -> void)
	const setbg	: (t : term#, c : color -> void)
	const setattr	: (t : term#, c : attr -> void)

	pkglocal const resize	: (t : term#, x : int, y : int -> void)
;;

/* The mapping used by tmux to degrade 256 -> 16 */
const col256to16 = [
	 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	 0,  4,  4,  4, 12, 12,  2,  6,  4,  4, 12, 12,  2,  2,  6,  4,
	12, 12,  2,  2,  2,  6, 12, 12, 10, 10, 10, 10, 14, 12, 10, 10,
	10, 10, 10, 14,  1,  5,  4,  4, 12, 12,  3,  8,  4,  4, 12, 12,
	 2,  2,  6,  4, 12, 12,  2,  2,  2,  6, 12, 12, 10, 10, 10, 10,
	14, 12, 10, 10, 10, 10, 10, 14,  1,  1,  5,  4, 12, 12,  1,  1,
	 5,  4, 12, 12,  3,  3,  8,  4, 12, 12,  2,  2,  2,  6, 12, 12,
	10, 10, 10, 10, 14, 12, 10, 10, 10, 10, 10, 14,  1,  1,  1,  5,
	12, 12,  1,  1,  1,  5, 12, 12,  1,  1,  1,  5, 12, 12,  3,  3,
	 3,  7, 12, 12, 10, 10, 10, 10, 14, 12, 10, 10, 10, 10, 10, 14,
	 9,  9,  9,  9, 13, 12,  9,  9,  9,  9, 13, 12,  9,  9,  9,  9,
	13, 12,  9,  9,  9,  9, 13, 12, 11, 11, 11, 11,  7, 12, 10, 10,
	10, 10, 10, 14,  9,  9,  9,  9,  9, 13,  9,  9,  9,  9,  9, 13,
	 9,  9,  9,  9,  9, 13,  9,  9,  9,  9,  9, 13,  9,  9,  9,  9,
	 9, 13, 11, 11, 11, 11, 11, 15,  0,  0,  0,  0,  0,  0,  8,  8,
	 8,  8,  8,  8,  7,  7,  7,  7,  7,  7, 15, 15, 15, 15, 15, 15
]

const mk = {fd
	var ws, t, name

	tcwinsize(fd, &ws)
	t = std.mk([
		.fd=fd,
		.x=0,
		.y=0,
		.width=(ws.col : int),
		.height=(ws.row: int),
		.fg=Default,
		.bg=Default,
		.buf=std.slalloc((ws.row * ws.col : std.size)),
		.cursor=false,
		.ncolors=8,
		.hasrgb=false,
	])
	match std.getenv("COLORTERM")
	| `std.Some _:	t.hasrgb = true
	| `std.None:
	;;
	name = std.getenvv("TERM", "vt100")
	match tiparse(name)
	| `std.Ok inf:
		t.info = inf
		match tigetnum(&t.info, Max_colors)
		| `std.Some n: t.ncolors = (n : uint)
		| `std.None:
		;;
	| `std.Err e:	/* whatevs */
	;;
	addevents(t)
	std.slfill(t.buf, [.chr=' ', .attr=Normal, .fg=Default, .bg=Default])
	std.fput(t.fd, std.getv(tigetstr(&t.info, Keypad_xmit), ""))
	tcgetattr(t.fd, &t.orig)
	-> t
}

const free = {t
	std.fput(t.fd, std.getv(tigetstr(&t.info, Keypad_local), ""))
	tcsetattr(t.fd, `termdraw.Oflush, &t.orig)
	std.fput(t.fd, "\x1bc")
	std.slfree(t.buf)
	std.free(t)
}

const raw = {t
	var tio

	tio = t.orig
	tio.iflag &= ~(Brkint | Icrnl | Inpck | Istrip | Ixon)
	tio.oflag &= ~termdraw.Opost
	tio.cflag |= termdraw.Cs8
	tio.lflag &= ~(Echo | Icanon | Iexten | Isig)
	tio.cc[termdraw.Vmin] = 0
	tio.cc[termdraw.Vtime] = 1
	tcsetattr(t.fd, `termdraw.Oflush, &tio)
	cursoroff(t)
	cls(t);
}

const addevents = {t
	var s : byte[1]
	t.kesc = std.zalloc()
	/* single byte chars default to themselves */
	for var i = 0; i < 128; i++
		s[0] = (i : byte)
		if i < 0x1f
			addevent(t, -1, s[:], `Ctrl (i | 0x60))
		else
			addevent(t, -1, s[:], `Kc i)
		;;
	;;
	/* hard coded overrides */
	addevent(t, -1, "\x1b", `Kesc)
	addevent(t, -1, "\r", `Kc '\n')
	addevent(t, -1, "\t", `Kc '\t')
	addevent(t, -1, "\x1b[A", `Kup)
	addevent(t, -1, "\x1b[B", `Kdown)
	addevent(t, -1, "\x1b[C", `Kleft)
	addevent(t, -1, "\x1b[D", `Kright)
	addevent(t, -1, "\b", `Kbksp)
	addevent(t, -1, "\x7f", `Kbksp)

	/* keys from terminfo */
	addevent(t, Key_up, "", `Kup)
	addevent(t, Key_down, "", `Kdown)
	addevent(t, Key_left, "", `Kleft)
	addevent(t, Key_right, "", `Kright)

	addevent(t, Key_backspace, "\b", `Kbksp)
	addevent(t, Key_dc, "\x1b[~3", `Kdel)
	addevent(t, Tab, "\x09", `Kc '\t')
	addevent(t, Key_npage, "", `Kpgdn)
	addevent(t, Key_ppage, "", `Kpgup)
	addevent(t, Key_home, "\x1b0H", `Khome)
	addevent(t, Key_end, "\x1b0F", `Kend)
	addevent(t, Key_f1, "", `Kf1)
	addevent(t, Key_f2, "", `Kf2)
	addevent(t, Key_f3, "", `Kf3)
	addevent(t, Key_f4, "", `Kf4)
	addevent(t, Key_f5, "", `Kf5)
	addevent(t, Key_f6, "", `Kf6)
	addevent(t, Key_f7, "", `Kf7)
	addevent(t, Key_f8, "", `Kf8)
	addevent(t, Key_f9, "", `Kf9)
	addevent(t, Key_f10, "", `Kf10)
	addevent(t, Key_f11, "", `Kf11)
}

const addevent = {t, key, fallback, ev
	var seq, n, nn

	seq = std.getv(tigetstr(&t.info, key), fallback)
	if seq.len == 0
		-> void
	;;
	n = t.kesc
	for b : seq
		match n.sub[b]
		| `std.Some et:	nn = et
		| `std.None:	nn = std.zalloc()
		;;
		n.sub[b] = `std.Some nn
		n = nn
	;;
	n.ev = ev
}

const cls = {t
	damage(t, 0, 0, t.width, t.height)
	std.slfill(t.buf, [.chr=' ', .attr=Normal, .fg=Default, .bg=Default])
	std.fput(t.fd, "\x1b[2J")
	move(t, 0, 0)
}

const clear = {t, x0, y0, x1, y1
	var x, y

	x0 = std.clamp(x0, 0, t.width)
	y0 = std.clamp(y0, 0, t.height)
	x1 = std.clamp(x1, 0, t.width)
	y1 = std.clamp(y1, 0, t.height)

	if x0 > x1
		std.swap(&x0, &x1)
	;;
	if y0 > y1
		std.swap(&y0, &y1)
	;;

	damage(t, x0, y0, x1, y1)
	for y = y0; y != y1; y++
		for x = x0; x != x1; x++
			t.buf[y*t.width + x].bg = t.bg
			t.buf[y*t.width + x].fg = t.fg
			t.buf[y*t.width + x].chr = ' '
		;;
	;;

}

/*
  Generates a 256 color approximation of an RGB color
  using the nearest euclidian approximation.

  This follows the apparently-standard "* 40 + 55" color
  cube of 256color.pl
*/
const best256 = {r, g, b
	var nearest_dist : uint64 = 0x1000000000
	var dr : uint64 = 0
	var dg : uint64 = 0
	var db : uint64 = 0
	var nearest_k : uint8 = 0
	var k : uint8 = 16

	/* TODO: perhaps cache the last N of these */
	for rr : [0, 95, 135, 175, 215, 255][:]
		dr = (rr - (r : uint64)) * (rr - (r : uint64))
		for gg : [0, 95, 135, 175, 215, 255][:]
			dg = (gg - (g : uint64)) * (gg - (g : uint64))
			for bb : [0, 95, 135, 175, 215, 255][:]
				db = (bb - (b : uint64)) * (bb - (b : uint64))
				if dr + dg + db <= nearest_dist
					nearest_dist = dr + dg + db
					nearest_k = k
				;;
				k++
			;;
		;;
	;;

	-> (nearest_k : uint8)
}

const degradecolor = {t, c
	var degraded = c
	var approx256
	var approx16
	match c
	| `Palette8 _:
		-> c
	| `Palette256 v:
		if t.ncolors >= 256
			-> c
		elif v >= 16 && t.hasrgb
			var r, g, b
			r = (v - 16) / 36
			if r != 0
				r = r * 40 + 55
			;;
			g = ((v - 16) / 6) % 6
			if g != 0
				g = g * 40 + 55
			;;
			b = (v - 16) % 6
			if b != 0
				b = b * 40 + 55
			;;
			-> `RGB (r, g, b)
		else
			approx16 = col256to16[v]
			if t.ncolors >= 16
				-> `Palette256 approx16
			else
				-> `Palette8 ((approx16 % 8) : int8)
			;;
		;;
	| `RGB (r, g, b):
		if t.hasrgb
			-> c
		;;
		approx256 = best256(r, g, b)
		-> degradecolor(t, `Palette256 approx256)
	;;
}

const applyfg = {t, sb, c
	match c
	| `Palette8 v:		tfmt(t, sb, Set_a_foreground, "\x1b[3%p1%dm", [`Int (v : int)][:])
	| `Palette256 v:	tfmt(t, sb, Set_a_foreground, "\x1b[38;5;%p1%dm", [`Int (v : int)][:])
	| `RGB (r, g, b):	std.sbfmt(sb, "\x1b[38;2;{};{};{}m", r, g, b)
	;;
}

const applybg = {t, sb, c
	match c
	| `Palette8 v:		tfmt(t, sb, Set_a_background, "\x1b[4%p1%dm", [`Int (v : int)][:])
	| `Palette256 v:	tfmt(t, sb, Set_a_background, "\x1b[48;5;%p1%dm", [`Int (v : int)][:])
	| `RGB (r, g, b):	std.sbfmt(sb, "\x1b[48;2;{};{};{}m", r, g, b)
	;;
}

const samecolor = {a, b
	match a
	| `RGB (ar, ag, ab):
		match b
		| `RGB (br,bg,bb): -> (ar==br) && (bg==ag) && (ab==bb)
		| _: -> false
		;;
	| `Palette256 av:
		match b
		| `Palette256 bv: -> av == bv
		| _: -> false
		;;
	| `Palette8 av:
		match b
		| `Palette8 bv: -> av == bv
		| _: -> false
		;;
	;;
}

const applyattrs = {t, sb, attr
	tfmt(t, sb, Exit_attribute_mode, "\x1b(B\x1b[m", [][:])
	match attr
	| Normal:	/* we already cleared it */
	| Bold:		tfmt(t, sb, Enter_bold_mode, "\x1b[1m", [][:])
	| Italic:	tfmt(t, sb, Enter_italics_mode, "\x1b[3m", [][:])
	| Underline:	tfmt(t, sb, Enter_underline_mode, "\x1b[4m", [][:])
	| Blink:	tfmt(t, sb, Enter_blink_mode, "\x1b[5m", [][:])
	| Invert:	tfmt(t, sb, Enter_standout_mode, "\x1b[7m", [][:])
	| _:		std.fatal("unknown attr {}\n", attr)
	;;
}

const flush = {t
	var fg, bg, attr, len
	var sb, s

	fg = `Palette8 -1
	bg = `Palette8 -1
	attr = -1
	sb = std.mksb()

	if t.damx0 == -1 || t.damy0 == -1
		-> void
	;;
	/* hide cursor, move to top of damage region, and draw */
	tfmt(t, sb, Cursor_invisible, "\x1b[?25l", [][:])
	for var y = t.damy0; y < t.damy1; y++
		fg = `Palette8 -1
		bg = `Palette8 -1
		attr = -1
		tfmt(t, sb, Cursor_address, \
			"\x1b[%i%p1%d;%p2%df", \
			[`Int y, `Int t.damx0][:])
		for var x = t.damx0; x < t.damx1; x++
			var i = (y * t.width) + x
			if attr != t.buf[i].attr
				attr = t.buf[i].attr;
				applyattrs(t, sb, attr)
			;;

			var samefg = samecolor(fg, t.buf[i].fg)
			var samebg = samecolor(bg, t.buf[i].bg)
			if samefg && samebg
				goto colorsokay
			;;

			var defaultfg = samecolor(t.buf[i].fg, Default)
			var defaultbg = samecolor(t.buf[i].bg, Default)
			var must_reset = false
			if defaultfg || defaultbg
				tfmt(t, sb, Orig_pair, "\x1b[39;49m", [][:])
				must_reset = true
			;;

			fg = t.buf[i].fg;
			if !defaultfg && (must_reset || !samefg)
				applyfg(t, sb, fg)
			;;

			bg = t.buf[i].bg;
			if !defaultbg && (must_reset || !samebg)
				applybg(t, sb, bg)
			;;

:colorsokay
			std.sbputc(sb, t.buf[i].chr)
		;;
	;;
	/* restore cursor state */
	tfmt(t, sb, Cursor_address, "\x1b[%i%p1%d;%p2%df", [`Int t.cy, `Int t.cx][:])
	if t.cursor
		tfmt(t, sb, Cursor_visible, "\x1b[?25h", [][:])
	;;

	len = 0
	s = std.sbfin(sb)
	while len != s.len
		match std.write(t.fd, s[len:])
		| `std.Ok 0:	break
		| `std.Ok n:	len += n
		| `std.Err e:	std.fatal("could not flush: {}\n", e)
		;;
	;;
	std.slfree(s)

	/* clear damage */
	damage(t, -1, -1, -1, -1)

}

const resize = {t, x, y
	var buf
	var w, h

	w = std.min(x, t.width)
	h = std.min(y, t.height)

	buf=std.slalloc((x* y : std.size))
	std.slfill(buf, [.chr=' ', .attr=t.attr, .fg=t.fg, .bg=t.bg])
	for var i = 0; i < h; i++
		std.slcp(buf[x*i : x*i + w], t.buf[t.width *i:t.width*i + w])
	;;
	std.slfree(t.buf)
	t.width = x
	t.height = y
	t.buf = buf
	flush(t)
}

const size = {t
	-> (t.width, t.height)
}

const move = {t, x, y
	t.x = x
	t.y = y
}

const cursorpos = {t, x, y
	t.cx = x
	t.cy = y
}

const cursoroff = {t
	t.cursor = false
}

const cursoron = {t
	t.cursor = true
}

const strwidth = {t, str
	var x0, x

	x = t.x
	x0 = t.x
	for c : std.bychar(str)
		match c
		| '\t':	x = (x / 8 + 1)*8
		| '\n':	/* ignore */
		| chr:	x++
		;;
	;;
	-> x - x0
}

const putc = {t, c
	var idx
	
	if t.x >= t.width || t.y >= t.height
		-> void
	;;

	damage(t, t.x, t.y, t.x+1, t.y+1)
	idx = t.y * t.width + t.x
	match c
	| '\r':	t.x = 0
	| '\n': t.y = std.min(t.y + 1, t.height)
	| '\t':
		for var i = 0; i < 8; i++
			putc(t, ' ')
		;;
	| chr:
		t.buf[idx].chr = chr
		t.buf[idx].fg = t.fg
		t.buf[idx].bg = t.bg
		t.buf[idx].attr = t.attr

		if t.x > t.width
			t.y++ 
		;;
		t.x = (t.x + 1) % t.width
	;;
}

const put = {t, fmt, args
	var s, ap

	ap = std.vastart(&args)
	s = std.fmtv(fmt, &ap)
	for c : std.bychar(s)
		putc(t, c)
	;;
	std.slfree(s)
}

const setattr = {t, attr
	t.attr = attr
}

const setfg = {t, fg
	t.fg = degradecolor(t, fg)
}

const setbg = {t, bg
	t.bg = degradecolor(t, bg)
}

const tfmt = {t, sb, prop, fb, params
	match tigetstr(&t.info, prop)
	| `std.Some s:	tifmt(&t.fmt, sb, s, params)
	| `std.None:	tifmt(&t.fmt, sb, fb, params)
	;;
}

const damage = {t, x0, y0, x1, y1
	if t.damx0 == -1 || x0 == -1
		t.damx0 = x0
		t.damy0 = y0
		t.damx1 = x1
		t.damy1 = y1
	else
		t.damx0 = std.min(x0, t.damx0)
		t.damy0 = std.min(y0, t.damy0)
		t.damx1 = std.max(x1, t.damx1)
		t.damy1 = std.max(y1, t.damy1)
	;;
}
